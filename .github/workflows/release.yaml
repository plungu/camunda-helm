name: Release Charts

on:
  push:
    branches: ['release-*']
  # Allow to run the workflow from GitHub UI and other workflows.
  workflow_dispatch:

env:
  HELM_VERSION: 3.4.0

jobs:
  update-charts-changelog:
    runs-on: ubuntu-latest
    container: quay.io/git-chglog/git-chglog:0.15.0
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Bash is needed by "tj-actions/changed-files" Github action.
      - name: Install dependencies
        run: |
          apk add bash

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Get list of changed charts
        id: list-changed-charts
        uses: tj-actions/changed-files@v1.1.3
        with:
          files: charts/*/Chart.yaml

      - name: Update charts changelog
        if: steps.list-changed-charts.outputs.any_changed == 'true'
        shell: bash
        run: |
          set -x
          apk add git grep yq

          for chart_file in ${{ steps.list-changed-charts.outputs.all_modified_files }}; do
              chart_name=$(grep -Po "(?<=^name: ).+" ${chart_file})
              chart_version=$(grep -Po "(?<=^version: ).+" ${chart_file})
              chart_tag="${chart_name}-${chart_version}"
              chart_path="charts/${chart_name}"

              #
              # Generate chart CHANGELOG.md file.
              git-chglog                                \
                  --output "${chart_path}/CHANGELOG.md" \
                  --tag-filter-pattern "${chart_name}"  \
                  --next-tag "${chart_tag}"             \
                  --path "${chart_path}"                \

              #
              # Generate ArtifactHub annotation and update Chart.yaml with it.
              git-chglog                                    \
                  --output "${chart_path}/release-notes.md" \
                  --tag-filter-pattern "${chart_name}"      \
                  --next-tag "${chart_tag}"                 \
                  --path "${chart_path}" "${chart_tag}"

              # TODO: Rethink about this approach of using bash to generate YAML changes for ArtifactHub,
              # and find out if there is a better/cleaner way to make it.
              commit_types="Added Changed Deprecated Removed Fixed Security"
              echo '|' > "${chart_path}/changes-for-artifacthub.yaml"
              for commit_type in ${commit_types}; do
                  commit_type_section=$(sed -rn "/^\#+\s${commit_type}/,/^$/p" "${chart_path}/release-notes.md")
                  if [[ -n "${commit_type_section}" ]]; then
                      echo "${commit_type_section}" | egrep '^-' | sed 's/^- //g' | while read commit_message; do
                          echo "  - kind: ${commit_type,,}"
                          echo "    description: \"${commit_message}\""
                      done >> "${chart_path}/changes-for-artifacthub.yaml"
                  fi
              done

              cat "${chart_path}/changes-for-artifacthub.yaml"

              # Merge changes back to the Chart.yaml file.
              yq eval-all \
                  'select(fileIndex==0).annotations."artifacthub.io/changes" = select(fileIndex==1) | select(fileIndex==0)' \
                  ${chart_path}/Chart.yaml ${chart_path}/changes-for-artifacthub.yaml > \
                  ${chart_path}/Chart-with-artifacthub-changes.yaml

              mv ${chart_path}/Chart-with-artifacthub-changes.yaml ${chart_path}/Chart.yaml

              # Push changes to the main branch and current branch.
              git add ${chart_path}/CHANGELOG.md ${chart_path}/Chart.yaml
              git commit -m "Update changelog for chart ${chart_name} ${chart_version}"
              git push origin "${GITHUB_REF##*/}":main "${GITHUB_REF##*/}"
          done

  release:
    needs: update-charts-changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Workaround because checkout action doesn't pull latest changes.
      # https://github.com/actions/checkout/issues/439
      - name: Update local checkout
        run: git pull --no-rebase

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: "${{ env.HELM_VERSION }}"

      - name: Run Chart Releaser
        uses: helm/chart-releaser-action@v1.1.0
        env:
          CR_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: Get Released Charts
        id: get-released-charts
        run: |
          released_charts=$(find .cr-release-packages -name "*.tgz" -printf '%P ' | sed 's/\.tgz//g')
          echo "released_charts: ${released_charts}"
          echo "::set-output name=released_charts::${released_charts}"
    outputs:
      released_charts: ${{ steps.get-released-charts.outputs.released_charts }}

  # A workaround till helm/chart-releaser supports release notes.
  # https://github.com/helm/chart-releaser/issues/118
  # https://github.com/helm/chart-releaser/pull/137
  update-charts-release-notes:
    needs: release
    runs-on: ubuntu-latest
    container: quay.io/git-chglog/git-chglog:0.15.0
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Publish charts release notes
        run: |
          set -x
          apk add git curl jq grep

          repo_api_base="https://api.github.com/repos/${GITHUB_REPOSITORY}"
          released_charts="${{ needs.release.outputs.released_charts }}"

          echo "released_charts: ${released_charts}"

          for chart_tag in ${released_charts}; do
              chart_version=$(echo ${chart_tag} | grep -oP '\d+\.\d+\.\d+')
              chart_name=${chart_tag/-$chart_version/}

              chart_tag_changelog=$(git-chglog --tag-filter-pattern ${chart_name} \
                  --path charts/${chart_name} ${chart_tag})

              chart_release_notes_json=$(jq -n --arg body "$chart_tag_changelog" '{body: $body}')

              chart_latest_release_id=$(curl --silent -H "Accept: application/vnd.github.v3+json" \
                  ${repo_api_base}/releases/tags/${chart_tag} | jq '.id')

              curl -X PATCH -H "Accept: application/vnd.github.v3+json" \
                  -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
                  ${repo_api_base}/releases/${chart_latest_release_id} -d "${chart_release_notes_json}"
          done
